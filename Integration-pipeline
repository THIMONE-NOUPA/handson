pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-token')
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    checkout scmGit(
                        branches: [[name: '*/main']],
                        extensions: [],
                        userRemoteConfigs: [[
                            credentialsId: 'jenkins-token',
                            url: 'https://github.com/THIMONE-NOUPA/handson.git'
                        ]]
                    )
                }
            }
        }

        stage('Testing') {
            agent {
                docker { image 'maven:3.8.5-openjdk-18' }
            }
            steps {
                sh '''
                cd src
                mvn test
                '''
            }
        }

        stage('SonarQube analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:5.0.1'
                }
            }
            environment {
                CI = 'true'
                scannerHome = '/opt/sonar-scanner'
            }
            steps {
                withSonarQubeEnv('Sonar-uk') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }

        stage('Login to DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                        sh 'docker login -u $DOCKERHUB_CREDENTIALS_USR -p $DOCKERHUB_CREDENTIALS_PSW'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def gitCommitHash = sh(script: 'git rev-parse --short=6 HEAD', returnStdout: true).trim()
                    sh """
                    cd ${WORKSPACE}/src
                    docker build -t thimone/springboot:${gitCommitHash} .
                    """
                }
            }
        }

        stage('Push Docker Image') {
            when {
                branch 'main'
            }
            steps {
                script {
                    def gitCommitHash = sh(script: 'git rev-parse --short=6 HEAD', returnStdout: true).trim()
                    sh """
                    docker push thimone/springboot:${gitCommitHash}
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}

